(defn vv [f] (fn [& arg] (apply mapv f arg)))
(def v+ (vv +))
(def v- (vv -))
(def v* (vv *))
(def vd (vv /))
(def m+ (vv v+))
(def m- (vv v-))
(def m* (vv v*))
(def md (vv vd))
(def c+ (vv m+))
(def c- (vv m-))
(def c* (vv m*))
(def cd (vv md))
(defn transpose [m] (apply mapv vector m))
(defn scalar [a, b] (apply + (v* a b)))
(defn vect [a, b]
      (letfn
        [(det2 [i, j] (- (* (nth a i) (nth b j))
                         (* (nth a j) (nth b i))))]
        (vector (det2 1 2) (- (det2 0 2)) (det2 0 1))))
(defn v*s [v s] (mapv (fn [x] (* x s)) v))
(defn m*s [m s] (mapv (fn [v] (v*s v s)) m))
(defn m*v [m v] (mapv (fn [x] (scalar x v)) m))
(defn m*m [m1 m2] (transpose (mapv (fn [v] (m*v m1 v)) (transpose m2))))